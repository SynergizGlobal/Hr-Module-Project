name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build backend JAR
        run: |
          cd backend
          mvn clean package -DskipTests

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          build-args: |
            CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
            CLIENT_URL=${{ secrets.CLIENT_URL }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            MAIL_SENDER=${{ secrets.MAIL_SENDER }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            ACCESS_KEY=${{ secrets.ACCESS_KEY }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            S3_BUCKET=${{ secrets.S3_BUCKET }}
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/hr-backend:latest

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4

        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          build-args: |
              VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL }}
              VITE_FRONTEND_URL=${{ secrets.VITE_FRONTEND_URL }}
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/hr-frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      - name: Deploy to EC2
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
        run: |
          # Add the EC2 SSH key
          echo "${{ secrets.EC2_SSH_KEY }}" > HRModuleKey.pem
          chmod 600 HRModuleKey.pem

          # Log in to Docker Hub
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

            # Clean up Docker resources if disk space is low
            if [ \$(df / | awk 'NR==2 {print \$5}' | sed 's/%//') -gt 80 ]; then
                echo "Running Docker system prune due to low disk space."
                docker system prune -af
            fi

            # Pull the latest images
            docker pull $DOCKER_USERNAME/hr-backend:latest
            docker pull $DOCKER_USERNAME/hr-frontend:latest

            # Stop and remove existing containers
            docker stop hr-backend || true
            docker rm hr-backend || true
            docker stop hr-frontend || true
            docker rm hr-frontend || true

            # Run new backend container
            docker run --pull always -d -p 8080:8080 --name hr-backend \
            $DOCKER_USERNAME/hr-backend:latest

            # Run new frontend container
            docker run --pull always -d -p 3000:3000 --name hr-frontend \
            $DOCKER_USERNAME/hr-frontend:latest
          EOF
